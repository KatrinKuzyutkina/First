@startuml
start
while (Был ли предыдущий выстрел успешным?) is (да)
    while (Корабль добавлен в множество затонувших?) is (да)
        :Определяет новую случайную координату;
        if (Успешный выстрел?) then (да)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            if (Какое повреждение?) then (ранил)
                :Добавляет координаты корабля в список поврежденных;
                :Устанавливает направление выстрела;
            else (убил)
                :Добавляет координаты корабля в список затонувших;
            endif
            :"Дополнительный ход";
        else (нет)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            :Ход переходит к игроку;
            stop
        endif
        backward :Дополнительный ход;
    endwhile (нет)
        if (Определено направление атаки?) then (нет)
            :Стреляет влево, вправо, вверх, вниз от последней клетки, в которую попал;
        else (да)
            :Стреляет в текущем направлении;
        endif
        if (Успешный выстрел?) then (да)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            if (Какое повреждение?) then (ранил)
                :Добавляет координаты корабля в список поврежденных;
                :Устанавливает направление выстрела;
            else (убил)
                :Добавляет координаты корабля в список затонувших;
            endif
            :"Дополнительный ход";
        else (нет)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            :Меняет направление;
            :Ход переходит к игроку;
            stop
        endif
        backward :Дополнительный ход;
endwhile (нет)
if (Определено направление атаки?) then (нет)
            :Определяет новую случайную координату;
        else (да)
            :Стреляет в текущем направлении;
        endif
        if (Успешный выстрел?) then (да)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            if (Какое повреждение?) then (ранил)
                :Добавляет координаты корабля в список поврежденных;
                :Устанавливает направление выстрела;
            else (убил)
                :Добавляет координаты корабля в список затонувших;
            endif
            :"Дополнительный ход";
            break
        else (нет)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            :Меняет направление;
            :Ход переходит к игроку;
            stop
        endif
stop
@enduml


1.
@startuml
start
    while (Корабль добавлен в множество затонувших?) is (да)
        :Определяет новую случайную координату;
        if (Успешный выстрел?) then (да)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            if (Какое повреждение?) then (ранил)
                :Добавляет координаты корабля в список поврежденных;
                :Следующий выстрел будет делать влево, вправо, вверх, вниз от последней клетки, в которую попал;;
            else (убил)
                :Добавляет координаты корабля в список затонувших;
            endif
            :"Дополнительный ход";
        else (нет)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            :Ход переходит к игроку;
            stop
        endif
        backward :Дополнительный ход;
    endwhile (нет)
stop
@enduml

2.
@startuml
start
while (Был ли предыдущий выстрел успешным?) is (да)
    while (Корабль добавлен в множество затонувших?) is (да)
        :Диаграмма затонувших кораблей;
    endwhile (нет)
    :Стреляет в текущем направлении;
        if (Успешный выстрел?) then (да)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            if (Какое повреждение?) then (ранил)
                :Добавляет координаты корабля в список поврежденных;
                :Устанавливает направление выстрела;
            else (убил)
                :Добавляет координаты корабля в список затонувших;
            endif
            :"Дополнительный ход";
        else (нет)
            :Обновляет состояние игрового поля, показывая результат выстрела;
            :Меняет направление выстрела;
            :Ход переходит к игроку;
            stop
        endif
        backward :Дополнительный ход;
endwhile (нет)
stop
@enduml

3.
@startuml
start
while (Был ли предыдущий выстрел успешным?) is (да)
    :Диаграмма раненных кораблей;
endwhile (нет)
    if (Определено направление атаки?) then (нет)
    :Определяет новую случайную координату;
  else (да)
    :Стреляет в текущем направлении;
  endif
  if (Успешный выстрел?) then (да)
    :Обновляет состояние игрового поля, показывая результат выстрела;
    if (Какое повреждение?) then (ранил)
      :Добавляет координаты корабля в список поврежденных;
      :Устанавливает направление выстрела;
    else (убил)
      :Добавляет координаты корабля в список затонувших;
    endif
    :"Дополнительный ход";
    break
  else (нет)
    :Обновляет состояние игрового поля, показывая результат выстрела;
    if (Было определено направление атаки?) then (да)
      :Меняет направление выстрела;
    else (нет)
    endif
    :Ход переходит к игроку;
    stop
  endif
stop
@enduml

4. 
@startuml
start
:Определяет случайную координату выстрела;
:Происходит выстрел;
if (Успешный выстрел?) then (да)
    :Обновляет состояние игрового поля, показывая результат выстрела;
    if (Какое повреждение?) then (ранил)
        :Добавляет координаты корабля в список поврежденных;
        :Следующий выстрел будет делать влево, вправо, вверх, вниз от последней клетки, в которую попал;;
    else (убил)
        :Добавляет координаты корабля в список затонувших;
    endif
    :"Дополнительный ход";
    :Диаграмма раненных кораблей;
    break
else(нет)
    :Обновляет состояние игрового поля, показывая результат выстрела;
    :Ход переходит игроку;
    stop
endif
@enduml
